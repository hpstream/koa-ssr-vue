const memoryFs = require('memory-fs');
const webpack = require('webpack');
let bundle;
let template;
let ready;
let clientManifest;
// 转换中间件
function koaDevMiddleware(expressDevMiddleware) {
    return function middleware(ctx, next) {
        return new Promise((resolve, reject) => {
            expressDevMiddleware(ctx.req, {
                end: (content) => {
                    ctx.body = content;
                    resolve();
                },
                setHeader: (name, value) => {
                    ctx.set(name, value);
                },
            }, reject);
        }).catch(next);
    };
}

function koaHotMiddleware(expressHotMiddleware) {
    return function middleware(ctx, next) {
        return new Promise((resolve) => {
            expressHotMiddleware(ctx.req, ctx.res, resolve);
        }).then(next);
    };
}

module.exports = function(app){
    let clientConfig = require('./client/buildConfig/webpack.client.conf');
    let serverConfig = require('./client/buildConfig/webpack.server.conf');
    clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]
    clientConfig.output.filename = '[name].js'
    clientConfig.plugins.push(
        new webpack.HotModuleReplacementPlugin(),
        new webpack.NoEmitOnErrorsPlugin()
    )
    // 热更新客户端
    const clientCompiler = webpack(clientConfig);
    const dmw = require('webpack-dev-middleware')(clientCompiler, {
        publicPath: clientConfig.output.publicPath,
        noInfo: true,
        quiet: true,
        stats: {
            colors: true,
            chunks: false,
            modules: false,
            assets: false
        }
    });
    app.use(koaDevMiddleware(dmw));
    clientCompiler.plugin('done', stats => {
        stats = stats.toJson()
        stats.errors.forEach(err => console.error(err))
        stats.warnings.forEach(err => console.warn(err))
        if (stats.errors.length) return
        clientManifest = JSON.parse(readFile(
            dmw.fileSystem,
            'vue-ssr-client-manifest.json'
        ))
    })
    
    const hmw = require('webpack-hot-middleware')(clientCompiler, { heartbeat: 5000 });
    app.use(koaHotMiddleware(hmw));
    
    // 热更新服务端
    const serverCompiler = webpack(serverConfig);
    const mfs = new memoryFs()
    serverCompiler.outputFileSystem = mfs
    serverCompiler.watch({}, (err, stats) => {
        if (err) throw err
        stats = stats.toJson()
        if (stats.errors.length) return
    
        // read bundle generated by vue-ssr-webpack-plugin
        bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
        // update()
    })
}
